<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Format-String on f1ow-blog</title><link>https://zp9080.github.io/categories/format-string/</link><description>Recent content in Format-String on f1ow-blog</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 28 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://zp9080.github.io/categories/format-string/rss.xml" rel="self" type="application/rss+xml"/><item><title>basic</title><link>https://zp9080.github.io/post/format-string/basic/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/format-string/basic/</guid><description>[TOC] 写入的字节数 但是写入4字节，也就是32位一般会太大不让写，所以一般都写入2字节 %n的理解 要利用%k$n这个特性，%n的特性：不输出字符，但</description></item><item><title>fmtstr_payload</title><link>https://zp9080.github.io/post/format-string/fmtstr_payload/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/format-string/fmtstr_payload/</guid><description>[TOC] 适用情况 这个工具只适用于栈上的格式化字符串，可以参考offset变量的设置要求 这个工具写入的数据直接是一个size_t类型，所以如果限制输</description></item><item><title>format_string-skills</title><link>https://zp9080.github.io/post/format-string/format_string-skills/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/format-string/format_string-skills/</guid><description>[TOC] 一般rsp为相对格式化字符串的第5或6个参数 打ogg只用写入几个字节 返回地址本身就是Libc里面的函数 那么我们写入的时候为了省事其实可以只</description></item><item><title>非常见类型的格式化字符串</title><link>https://zp9080.github.io/post/format-string/%E9%9D%9E%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/format-string/%E9%9D%9E%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>scanf的格式化字符串 做了这么久的格式化字符串，第一次见scanf的格式化字符串，于是做个记录 题目分析 可以看到把read读入的作为scan</description></item><item><title>非栈上格式化字符串</title><link>https://zp9080.github.io/post/format-string/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/format-string/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>（非栈上格式化字符串）往retaddr写一个orw，这种一般都要有无限次写才行,同时要找到栈上一个链才行 要注意链写的时候不要被覆盖，%{0}</description></item><item><title>栈上格式化字符串</title><link>https://zp9080.github.io/post/format-string/%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/format-string/%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>往栈上某个地址一次写入6个字节 #target是目标地址，n0是想要写入的东西,k为ljust之后p64(target)为格式化字符串的第几个</description></item></channel></rss>