<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shellcode on f1ow-blog</title><link>https://zp9080.github.io/categories/shellcode/</link><description>Recent content in Shellcode on f1ow-blog</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 19 Jan 2025 10:54:10 +0800</lastBuildDate><atom:link href="https://zp9080.github.io/categories/shellcode/rss.xml" rel="self" type="application/rss+xml"/><item><title>2025西湖论剑babytrace</title><link>https://zp9080.github.io/post/shellcode/2025%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91babytrace/</link><pubDate>Sun, 19 Jan 2025 10:54:10 +0800</pubDate><guid>https://zp9080.github.io/post/shellcode/2025%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91babytrace/</guid><description/></item><item><title>基于ptrace的沙箱绕过</title><link>https://zp9080.github.io/post/shellcode/%E5%9F%BA%E4%BA%8Eptrace%E7%9A%84%E6%B2%99%E7%AE%B1%E7%BB%95%E8%BF%87/</link><pubDate>Tue, 03 Sep 2024 14:31:33 +0800</pubDate><guid>https://zp9080.github.io/post/shellcode/%E5%9F%BA%E4%BA%8Eptrace%E7%9A%84%E6%B2%99%E7%AE%B1%E7%BB%95%E8%BF%87/</guid><description/></item><item><title>AE64</title><link>https://zp9080.github.io/post/shellcode/ae64/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/shellcode/ae64/</guid><description>AE64 AE64 is a tool which can transform any amd64 architecture shellcode into pure alphanumeric shellcode using self-modify code technology, so the page need to be writable.
Install git clone https://github.com/veritas501/ae64.git --depth 1 cd ae64 sudo python3 setup.py install Usage For usage example, you can see example folder.
Quickstart from ae64 import AE64 from pwn import * context.arch=&amp;#39;amd64&amp;#39; # get bytes format shellcode shellcode = asm(shellcraft.sh()) # get alphanumeric shellcode enc_shellcode = AE64().</description></item><item><title>basic_shellcode</title><link>https://zp9080.github.io/post/shellcode/basic_shellcode/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/shellcode/basic_shellcode/</guid><description>[TOC] 注意架构 通常情况下，pwntools 会根据您的操作系统和系统架构来自动选择合适的默认架构。如果您在64位操作系统上运行 pwntools，它</description></item><item><title>orw-plus</title><link>https://zp9080.github.io/post/shellcode/orw-plus/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/shellcode/orw-plus/</guid><description>详细内容可以参考这篇文章 贴一个总结的还不错的文章 [TOC] 两种基本orw的shellcode 第一种 ; open(&amp;#34;flag&amp;#34;, 0) push 0x67616c66 push 0x2 pop rax mov rdi,rsp xor rsi,rsi syscall ; read(fd, rsp, 0x50) mov rdi,rax xor rax,rax mov rsi,rsp push</description></item><item><title>shellcode tricks</title><link>https://zp9080.github.io/post/shellcode/shellcode-tricks/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/shellcode/shellcode-tricks/</guid><description>常用系统调用号 syscall 64位 0-&amp;gt;read 1-&amp;gt;write 2-&amp;gt;open 5-&amp;gt;fstat 9-&amp;gt;mmap 0xa-&amp;gt;mprotect 0xf-&amp;gt;rt_sigreturn 0x3b-&amp;gt;execve 0x5a-&amp;gt;chmod int 0x80 32位 3-&amp;gt;read 4-&amp;gt;write 5-&amp;gt;open 0xb-&amp;gt;execve 有时候受字长限制可以考虑eax,ax,al这种寄存器,让shellcode变短 cd</description></item><item><title>shellcode网站</title><link>https://zp9080.github.io/post/shellcode/shellcode%E7%BD%91%E7%AB%99/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/shellcode/shellcode%E7%BD%91%E7%AB%99/</guid><description>详细阐述了各种shellcode 可以查看各个指令对应的机械码 系统调用号 汇编网站 shellcode库</description></item><item><title>受限制的shellcode</title><link>https://zp9080.github.io/post/shellcode/%E5%8F%97%E9%99%90%E5%88%B6%E7%9A%84shellcode/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/shellcode/%E5%8F%97%E9%99%90%E5%88%B6%E7%9A%84shellcode/</guid><description>[TOC] 这篇博客不错 shellcode字长受限 一种解决方法是先写入read函数然后再read任意长度的shellcode 无法使用syscall 发现</description></item></channel></rss>