<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LLVM Pwn on f1ow-blog</title><link>https://zp9080.github.io/categories/llvm-pwn/</link><description>Recent content in LLVM Pwn on f1ow-blog</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Fri, 25 Oct 2024 15:34:48 +0800</lastBuildDate><atom:link href="https://zp9080.github.io/categories/llvm-pwn/rss.xml" rel="self" type="application/rss+xml"/><item><title>源鲁杯-2024 show_me_the_code</title><link>https://zp9080.github.io/post/llvm-pwn/%E6%BA%90%E9%B2%81%E6%9D%AF-2024-show_me_the_code/</link><pubDate>Fri, 25 Oct 2024 15:34:48 +0800</pubDate><guid>https://zp9080.github.io/post/llvm-pwn/%E6%BA%90%E9%B2%81%E6%9D%AF-2024-show_me_the_code/</guid><description/></item><item><title>llvm中ll文件解读</title><link>https://zp9080.github.io/post/llvm-pwn/llvm%E4%B8%ADll%E6%96%87%E4%BB%B6%E8%A7%A3%E8%AF%BB/</link><pubDate>Thu, 19 Sep 2024 13:49:55 +0800</pubDate><guid>https://zp9080.github.io/post/llvm-pwn/llvm%E4%B8%ADll%E6%96%87%E4%BB%B6%E8%A7%A3%E8%AF%BB/</guid><description>[TOC] ll文件解析 ll文件中常见变量的理解 @ - 全局变量 % - 局部变量 alloca - 在当前执行的函数的堆栈帧中分配内存，当该函数返回到其调用者时，将自动释放内</description></item><item><title>CISCN-2021 satool</title><link>https://zp9080.github.io/post/llvm-pwn/ciscn-2021-satool/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/llvm-pwn/ciscn-2021-satool/</guid><description>刚做完红帽杯那个入门题来写这个，一看代码500多行的re直接不想看了，后来跟着这个博客过了一遍，收获不少 参考博客 核心思想 做llvm pass首</description></item><item><title>llvm-pwn</title><link>https://zp9080.github.io/post/llvm-pwn/llvm-pwn/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/llvm-pwn/llvm-pwn/</guid><description>[TOC] 主要参考了此篇 博客 核心思路 其实llvm pass最主要的是pwn opt这个文件，同时其一般都是no pie,Partial RELRO,因此通常可以通过覆写got表</description></item><item><title>llvm基础学习</title><link>https://zp9080.github.io/post/llvm-pwn/llvm%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/llvm-pwn/llvm%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</guid><description>参考博客1 参考博客2 基础知识 前端后端都不用管，关注llvm IR这个东西 llvm IR的头部是一些Target Information target layout clang 与 llvm 常见指令 .ll 格式：人类可以阅读</description></item><item><title>红帽杯-2021 simpleVM</title><link>https://zp9080.github.io/post/llvm-pwn/%E7%BA%A2%E5%B8%BD%E6%9D%AF-2021-simplevm/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/llvm-pwn/%E7%BA%A2%E5%B8%BD%E6%9D%AF-2021-simplevm/</guid><description>[TOC] 入门llvm pass的第一题， 这里给出一个写的比较详细的博客 题目分析 先ctrl+g定位到.load段找到pass函数 发现如果函数名为o0o</description></item><item><title>强网杯-2022 yakagame</title><link>https://zp9080.github.io/post/llvm-pwn/%E5%BC%BA%E7%BD%91%E6%9D%AF-2022-yakagame/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://zp9080.github.io/post/llvm-pwn/%E5%BC%BA%E7%BD%91%E6%9D%AF-2022-yakagame/</guid><description>题目分析 做过前两个llvm的题，逆向基本已经没有什么问题了，题目逻辑都看得懂，题目中有个很明显的后门函数 if ( (__int64)*score &amp;gt; 0x12345678 ) backdoor(); 但是有个很困惑的地方是</description></item></channel></rss>